@page "/db";
@page "/db/aasx";
@page "/db/aas";
@page "/db/sm";
@page "/db/smjson";
@page "/db/sme";
@page "/db/svalue";
@page "/db/ivalue";
@page "/db/dvalue";
@using AasxServer
@using AasxServerDB
@using Microsoft.AspNetCore.Html;
@using AasxRestServerLibrary;
@using Microsoft.IdentityModel.Tokens;
@inject NavigationManager NavMan

<div>
    @{
        if (!Program.withDb)
        {
            <span>This is a in memory server!</span>
        }
        else
        {
            // get parameters
            string url = NavMan.Uri;
            var splitUrl = url.Split("?");
            url = splitUrl[0].ToLower();
            var sUrl = url.Split("/");
            string shorturl = url.Substring(0, url.Length - ("/" + sUrl[sUrl.Length - 1]).Length);
            if (splitUrl.Length == 2)
            {
                var query = System.Web.HttpUtility.ParseQueryString(splitUrl[1]);
                var list = query.Get("size");
                if (list != null)
                    size = Convert.ToInt32(list);
                list = query.Get("search");
                if (list != null)
                    search = list;
                list = query.Get("aasxnum");
                if (list != null)
                    aasxnum = Convert.ToInt32(list);
                list = query.Get("aasnum");
                if (list != null)
                    aasnum = Convert.ToInt32(list);
                list = query.Get("smnum");
                if (list != null)
                    smnum = Convert.ToInt32(list);
                list = query.Get("smenum");
                if (list != null)
                    smenum = Convert.ToInt32(list);
                list = query.Get("smId");
                if (list != null)
                    smId = list;
            }

            // change parameters to input window
            if (url.EndsWith("/aasx") || url.EndsWith("/aas") || url.EndsWith("/sm") || url.EndsWith("/sme")
            || url.EndsWith("/svalue") || url.EndsWith("/ivalue") || url.EndsWith("/dvalue"))
            {
                <input @bind="CurrentValue" style="width:200px; border-width: 1px; border-color: black;" />
                @code {
                    private string CurrentValue { get; set; }
                }
                if (CurrentValue != null && CurrentValue != "")
                {
                    var splitCur = CurrentValue.Split("=");
                    if (splitCur.Count() == 2)
                    {
                        switch (splitCur[0])
                        {
                            case "size":
                                size = 1000;
                                if (splitCur[1] != "")
                                    size = Convert.ToInt32(splitCur[1]);
                                break;
                            case "search":
                                search = splitCur[1];
                                break;
                            case "aasxnum":
                                aasxnum = 0;
                                if (splitCur[1] != "")
                                    aasxnum = Convert.ToInt32(splitCur[1]);
                                break;
                            case "aasnum":
                                aasnum = 0;
                                if (splitCur[1] != "")
                                    aasnum = Convert.ToInt32(splitCur[1]);
                                break;
                            case "smnum":
                                smnum = 0;
                                if (splitCur[1] != "")
                                    smnum = Convert.ToInt32(splitCur[1]);
                                break;
                            case "smenum":
                                smenum = 0;
                                if (splitCur[1] != "")
                                    smenum = Convert.ToInt32(splitCur[1]);
                                break;
                        }
                    }
                    CurrentValue = "";
                }
            }

            string searchLower = search.ToLower();
            string found = "";
            int count = 0;
            var watch = System.Diagnostics.Stopwatch.StartNew();

            using (AasContext db = new AasContext())
            {
                // startpage with count values
                if (!(url.EndsWith("/aasx") || url.EndsWith("/aas") || url.EndsWith("/sm") || url.EndsWith("/sme")
                || url.EndsWith("/svalue") || url.EndsWith("/ivalue") || url.EndsWith("/dvalue")))
                {
                    if (AasContext._isPostgres)
                    {
                        <span>PostgreSQL database</span>
                        <br />
                    }
                    else
                    {
                        <span>SQLite database</span>
                        <br />
                    }
                    <br />
                    <table class="table table-bordered table-sm" style="word-wrap:break-word;word-break:break-all;">
                        <tr>
                            <td><span>AASX#:</span></td>
                            <td><span>@db.AASXSets.Count()</span></td>
                            <td><a href="@(url + "/aasx")" target="_blank">aasx</a></td>
                        </tr>
                        <tr>
                            <td><span>AAS#:</span></td>
                            <td><span>@db.AASSets.Count()</span></td>
                            <td><a href="@(url + "/aas")" target="_blank">aas</a></td>
                        </tr>
                        <tr>
                            <td><span>SM#:</span></td>
                            <td><span>@db.SMSets.Count()</span></td>
                            <td><a href="@(url + "/sm")" target="_blank">sm</a></td>
                        </tr>
                        <tr>
                            <td><span>SME#:</span></td>
                            <td><span>@db.SMESets.Count()</span></td>
                            <td><a href="@(url + "/sme")" target="_blank">sme</a></td>
                        </tr>
                        <tr>
                            <td><span>IValue#:</span></td>
                            <td><span>@db.IValueSets.Count()</span></td>
                            <td><a href="@(url + "/ivalue")" target="_blank">ivalue</a></td>
                        </tr>
                        <tr>
                            <td><span>SValue#:</span></td>
                            <td><span>@db.SValueSets.Count()</span></td>
                            <td><a href="@(url + "/svalue")" target="_blank">svalue</a></td>
                        </tr>
                        <tr>
                            <td><span>DValue#:</span></td>
                            <td><span>@db.DValueSets.Count()</span></td>
                            <td><a href="@(url + "/dvalue")" target="_blank">dvalue</a></td>
                        </tr>
                    </table>
                    <br />
                    <b>Database structure:</b>
                    <br />
                    <img src="db-schema.jpg" />
                }

                if (url.EndsWith("/aasx"))
                {
                    List<AASXSet> data = null;
                    if (searchLower == "" && aasxnum == 0)
                    {
                        data = db.AASXSets
                        .OrderBy(a => a.AASXNum)
                        .Take(size)
                        .ToList();
                    }
                    else
                    {
                        data = db.AASXSets
                        .OrderBy(a => a.AASXNum)
                        .Where(a => (aasxnum == 0 || a.AASXNum == aasxnum) &&
                        (searchLower == "" || a.AASX.ToLower().Contains(searchLower)))
                        .Take(size)
                        .ToList();
                        found = data.Count() + "/";
                    }
                    total = db.AASXSets.Count();
                    count = data.Count();

                    <span>&nbsp&nbsp@("AASX#: " + found + total + " size=" + size + " search=" + search + " aasxnum=" + aasxnum)</span>
                    <br />
                    <br />
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">First 1000 as TABLE</span></b>
                        <br />
                    }
                    <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                        <thead>
                            <tr>
                                <th style="word-break:keep-all">AASX#</th>
                                <th style="word-break:keep-all">AASX</th>
                                <th style="word-break:keep-all">Links</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < data.Count && i < 1000; i++)
                            {
                                var aasxDB = data[i];
                                <tr>
                                    <td style="word-break:keep-all"><b>@aasxDB.AASXNum</b></td>
                                    <td>@aasxDB.AASX</td>
                                    <td style="word-break:keep-all">
                                        <a href="@(shorturl + "/aas?aasxnum=" + aasxDB.AASXNum)" target="_blank">aas </a>
                                        <a href="@(shorturl + "/sm?aasxnum=" + aasxDB.AASXNum)" target="_blank">sm</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">All other as text</span></b>
                        <br />
                        @for (int i = 1000; i < data.Count; i++)
                        {
                            var aasxDB = data[i];
                            <span style="background-color:blue;">&nbsp</span>
                            <span><b>@aasxDB.AASXNum</b></span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@aasxDB.AASX</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <a href="@(shorturl + "/aas?aasxnum=" + aasxDB.AASXNum)" target="_blank">aas </a>
                            <a href="@(shorturl + "/sm?aasxnum=" + aasxDB.AASXNum)" target="_blank">sm</a>
                            <br />
                        }
                        <br />
                    }
                    <span>@("Count: " + count)</span>
                    <br />
                }

                if (url.EndsWith("/aas"))
                {
                    List<AASSet> data = null;
                    if (searchLower == "" && aasxnum == 0 && aasnum == 0)
                    {
                        data = db.AASSets
                        .OrderBy(a => a.AASNum)
                        .Take(size)
                        .ToList();
                    }
                    else
                    {
                        data = db.AASSets
                        .OrderBy(a => a.AASNum)
                        .Where(a => (aasxnum == 0 || a.AASXNum == aasxnum) && (aasnum == 0 || a.AASNum == aasnum) &&
                            (searchLower == "" || a.IdShort.ToLower().Contains(searchLower) || a.AASId.ToLower().Contains(searchLower) || a.AssetKind.ToLower().Contains(searchLower) || a.GlobalAssetId.ToLower().Contains(searchLower)))
                        .Take(size)
                        .ToList();
                        found = data.Count() + "/";
                    }
                    total = db.AASSets.Count();
                    count = data.Count();

                    <span>&nbsp&nbsp@("AAS#: " + found + total + " size=" + size + " search=" + search + " aasxnum=" + aasxnum + " aasnum=" + aasnum)</span>
                    <br />
                    <br />
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">First 1000 as TABLE</span></b>
                        <br />
                    }
                    <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                        <thead>
                            <tr>
                                <th style="word-break:keep-all">AASX#</th>
                                <th style="word-break:keep-all">AAS#</th>
                                <th style="word-break:keep-all">Id</th>
                                <th style="word-break:keep-all">IdShort</th>
                                <th style="word-break:keep-all">AssetKind</th>
                                <th style="word-break:keep-all">GlobalAssetId</th>
                                <th style="word-break:keep-all">Links</th>
                                <th style="word-break:keep-all">API</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < data.Count && i < 1000; i++)
                            {
                                var aasDB = data[i];
                                string aas64 = Base64UrlEncoder.Encode((aasDB.AASId));
                                string link = AasxServer.Program.externalBlazor + "/shells/" + aas64;
                                <tr>
                                    <td style="word-break:keep-all">@aasDB.AASXNum</td>
                                    <td style="word-break:keep-all"><b>@aasDB.AASNum</b></td>
                                    <td>@aasDB.AASId</td>
                                    <td>@aasDB.IdShort</td>
                                    <td>@aasDB.AssetKind</td>
                                    <td>@aasDB.GlobalAssetId</td>
                                    <td style="word-break:keep-all">
                                        <a href="@(shorturl + "/aasx?aasxnum=" + aasDB.AASXNum)" target="_blank">aasx </a>
                                        <a href="@(shorturl + "/sm?aasnum=" + aasDB.AASNum)" target="_blank">sm</a>
                                    </td>
                                    <td><a href="@link" target="_blank">@link</a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">All other as text</span></b>
                        <br />
                        @for (int i = 1000; i < data.Count; i++)
                        {
                            var aasDB = data[i];
                            string aas64 = Base64UrlEncoder.Encode((aasDB.AASId));
                            string link = AasxServer.Program.externalBlazor + "/shells/" + aas64;
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@aasDB.AASXNum</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span><b>@aasDB.AASNum</b></span>
                            <span smDB="background-color:blue;">&nbsp</span>
                            <span>@aasDB.AASId</span>
                            <span smDB="background-color:blue;">&nbsp</span>
                            <span>@aasDB.IdShort</span>
                            <span smDB="background-color:blue;">&nbsp</span>
                            <span>@aasDB.AssetKind</span>
                            <span smDB="background-color:blue;">&nbsp</span>
                            <span>@aasDB.GlobalAssetId</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <a href="@(shorturl + "/aasx?aasxnum=" + aasDB.AASXNum)" target="_blank">aasx </a>
                            <a href="@(shorturl + "/sm?aasnum=" + aasDB.AASNum)" target="_blank">sm</a>
                            <span style="background-color:blue;">&nbsp</span>
                            <a href="@link" target="_blank">@link</a>
                            <br />
                        }
                        <br />
                    }
                    <span>@("Count: " + count)</span>
                    <br />
                }

                if (url.EndsWith("/sm"))
                {
                    List<SMSet> data = null;
                    if (searchLower == "" && aasxnum == 0 && aasnum == 0 && smnum == 0)
                    {
                        data = db.SMSets
                        .OrderBy(s => s.SMNum)
                        .Take(size)
                        .ToList();
                    }
                    else
                    {
                        data = db.SMSets
                        .OrderBy(s => s.SMNum)
                        .Where(s => (aasxnum == 0 || s.AASXNum == aasxnum) && (aasnum == 0 || s.AASNum == aasnum) && (smnum == 0 || s.SMNum == smnum) &&
                            (searchLower == "" || s.SMId.ToLower().Contains(searchLower) || s.IdShort.ToLower().Contains(searchLower) || s.SemanticId.ToLower().Contains(searchLower)))
                        .Take(size)
                        .ToList();
                        found = data.Count() + "/";
                    }
                    total = db.SMSets.Count();
                    count = data.Count();

                    <span>
                        &nbsp&nbsp@("SM#: " + found + total + " size=" + size + " search=" + search + " aasxnum=" + aasxnum + " aasnum=" + aasnum + " smnum=" + smnum)
                    </span>
                    <br />
                    <br />
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">First 1000 as TABLE</span></b>
                        <br />
                    }
                    <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                        <thead>
                            <tr>
                                <th style="word-break:keep-all">AASX#</th>
                                <th style="word-break:keep-all">AAS#</th>
                                <th style="word-break:keep-all">SM#</th>
                                <th style="word-break:keep-all">Id</th>
                                <th style="word-break:keep-all">IdShort</th>
                                <th style="word-break:keep-all">SemanticId</th>
                                <th style="word-break:keep-all">Links</th>
                                <th style="word-break:keep-all">API</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < data.Count && i < 1000; i++)
                            {
                                var smDB = data[i];
                                string submodel64 = Base64UrlEncoder.Encode((smDB.SMId));
                                string link = AasxServer.Program.externalBlazor + "/submodels/" + submodel64;
                                int smeCount = db.SMESets
                                .OrderBy(sme => sme.SMENum)
                                .Where(sme => sme.SMNum == smDB.SMNum)
                                .Count();

                                <tr>
                                    <td style="word-break:keep-all">@smDB.AASXNum</td>
                                    <td style="word-break:keep-all">@smDB.AASNum</td>
                                    <td style="word-break:keep-all"><b>@smDB.SMNum</b></td>
                                    <td>@smDB.SMId</td>
                                    <td>@smDB.IdShort</td>
                                    <td>@smDB.SemanticId</td>
                                    <td style="word-break:keep-all">
                                        <a href="@(shorturl + "/aasx?aasxnum=" + smDB.AASXNum)" target="_blank">aasx </a>
                                        <a href="@(shorturl + "/aas?aasnum=" + smDB.AASNum)" target="_blank">aas </a>
                                        <a href="@(shorturl + "/sme?smnum=" + smDB.SMNum)" target="_blank">sme:@(smeCount)</a>
                                    </td>
                                    <td><a href="@link" target="_blank">@link</a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">All other as text</span></b>
                        <br />
                        @for (int i = 1000; i < data.Count; i++)
                        {
                            var smDB = data[i];
                            string submodel64 = Base64UrlEncoder.Encode((smDB.SMId));
                            string link = AasxServer.Program.externalBlazor + "/submodels/" + submodel64;
                            int smeCount = db.SMESets
                            .OrderBy(sme => sme.SMENum)
                            .Where(sme => sme.SMNum == smDB.SMNum)
                            .Count();
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smDB.AASXNum</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smDB.AASNum</span>
                            <span smDB="background-color:blue;">&nbsp</span>
                            <span><b>@smDB.SMNum</b></span>
                            <span smDB="background-color:blue;">&nbsp</span>
                            <span>@smDB.SMId</span>
                            <span smDB="background-color:blue;">&nbsp</span>
                            <span>@smDB.IdShort</span>
                            <span smDB="background-color:blue;">&nbsp</span>
                            <span>@smDB.SemanticId</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <a href="@(shorturl + "/aasx?aasxnum=" + smDB.AASXNum)" target="_blank">aasx </a>
                            <a href="@(shorturl + "/aas?aasnum=" + smDB.AASNum)" target="_blank">aas </a>
                            <a href="@(shorturl + "/sme?smnum=" + smDB.SMNum)" target="_blank">sme:@(smeCount)</a>
                            <span style="background-color:blue;">&nbsp</span>
                            <a href="@link" target="_blank">@link</a>
                            <br />
                        }
                        <br />
                    }
                    <span>@("Count: " + count)</span>
                    <br />
                }

                if (url.EndsWith("/smjson") && smId != "")
                {
                    var smDB = db.SMSets.Where(s => s.SMId == smId).ToList().First();
                    if (smDB != null)
                    {
                        string json = DBRead.getSubmodelJson(smDB.SMId);
                        <span>@json</span>
                    }
                }

                if (url.EndsWith("/sme"))
                {
                    List<SMESet> data = null;
                    if (searchLower == "" && smnum == 0 && smenum == 0)
                    {
                        data = db.SMESets
                        .OrderBy(sme => sme.SMENum)
                        .Take(size)
                        .ToList();
                    }
                    else
                    {
                        data = db.SMESets
                        .OrderBy(sme => sme.SMENum)
                        .Where(sme => (smnum == 0 || sme.SMNum == smnum) && (smenum == 0 || sme.SMENum == smenum) &&
                            (searchLower == "" || sme.IdShort.ToLower().Contains(searchLower) || sme.SemanticId.ToLower().Contains(searchLower) || sme.SMEType.ToLower().Contains(searchLower) || sme.ValueType.ToLower().Contains(searchLower)
                            || (sme.ValueType == "S" && db.SValueSets.Any(sv => sv.ParentSMENum == sme.SMENum && sv.Annotation.ToLower().Contains(searchLower) && sv.Value.ToLower().Contains(searchLower)))
                            || (sme.ValueType == "I" && db.IValueSets.Any(sv => sv.ParentSMENum == sme.SMENum && sv.Annotation.ToLower().Contains(searchLower) && sv.Value.ToString().ToLower().Contains(searchLower)))
                            || (sme.ValueType == "F" && db.DValueSets.Any(sv => sv.ParentSMENum == sme.SMENum && sv.Annotation.ToLower().Contains(searchLower) && sv.Value.ToString().ToLower().Contains(searchLower)))
                            ))
                        .Take(size)
                        .ToList();
                        found = data.Count() + "/";
                    }
                    total = db.SMESets.Count();
                    count = data.Count();

                    <span>
                        &nbsp&nbsp@("SME#: " + found + total + " size=" + size + " search=" + search + " smnum=" + smnum + " smenum=" + smenum)
                    </span>
                    <br />
                    <br />
                    @if(size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">First 1000 as TABLE</span></b>
                        <br />
                    }
                    <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                        <thead>
                            <tr>
                                <th style="word-break:keep-all">SM#</th>
                                <th style="word-break:keep-all">Par#</th>
                                <th style="word-break:keep-all">SME#</th>
                                <th style="word-break:keep-all">Type</th>
                                <th style="word-break:keep-all">IdShort</th>
                                <th style="word-break:keep-all">SemanticId</th>
                                <th style="word-break:keep-all">Value</th>
                                <th style="word-break:keep-all">ValueType</th>
                                <th style="word-break:keep-all">Links</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < data.Count && i < 1000; i++)
                            {
                                var smeDB = data[i];
                                <tr>
                                    <td style="word-break:keep-all">@smeDB.SMNum</td>
                                    <td style="word-break:keep-all">@smeDB.ParentSMENum</td>
                                    <td style="word-break:keep-all"><b>@smeDB.SMENum</b></td>
                                    <td style="word-break:keep-all">@smeDB.SMEType</td>
                                    <td>@smeDB.IdShort</td>
                                    <td>@smeDB.SemanticId</td>
                                    <td>
                                        @if (smeDB.SMEType == "MLP")
                                        {
                                            List<string> list = smeDB.getMLPValue();
                                            <ul>
                                                @for (int z = 0; z + 1 < list.Count; z++)
                                                {
                                                    <li>
                                                        [@list[z]] @list[z+1]
                                                    </li>
                                                    z++;
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            @smeDB.getValue()
                                        }
                                    </td>
                                    <td style="word-break:keep-all">@smeDB.ValueType</td>
                                    <td style="word-break:keep-all">
                                        <a href="@(shorturl + "/sm?smnum=" + smeDB.SMNum)" target="_blank">sm </a>
                                        @if (smeDB.ParentSMENum != 0)
                                        {
                                            <a href="@(shorturl + "/sme?smnum="+ smeDB.SMNum + "&smenum=" + smeDB.ParentSMENum)" target="_blank">par </a>
                                        }
                                        @if (smeDB.SMEType == "MLP")
                                        {
                                            <a href="@(shorturl + "/svalue?smenum=" + smeDB.SMENum)" target="_blank">mlp</a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">All other as text</span></b>
                        <br />
                        @for (int i = 1000; i < data.Count; i++)
                        {
                            var smeDB = data[i];
                            <span>@smeDB.SMNum</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.ParentSMENum</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span><b>@smeDB.SMENum</b></span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.SMEType</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.IdShort</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.SemanticId</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>
                                @if (smeDB.SMEType == "MLP")
                                {
                                    List<string> list = smeDB.getMLPValue();
                                    string mlp = "";
                                    string seperateString = " | ";
                                    @for (int z = 0; z + 1 < list.Count; z++)
                                    {
                                        mlp += "[" + list[z] + "] " + list[z + 1] + seperateString;
                                        z++;
                                    }
                                    @mlp.Substring(0, mlp.Length - seperateString.Length)
                                }
                                else
                                {
                                    @smeDB.getValue()
                                }
                            </span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.ValueType</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <a href="@(shorturl + "/sm?smnum=" + smeDB.SMNum)" target="_blank">sm </a>
                            @if (smeDB.ParentSMENum != 0)
                            {
                                <a href="@(shorturl + "/sme?smnum="+ smeDB.SMNum + "&smenum=" + smeDB.ParentSMENum)" target="_blank">par </a>
                            }
                            @if (smeDB.SMEType == "MLP")
                            {
                                <a href="@(shorturl + "/svalue?smenum=" + smeDB.SMENum)" target="_blank">mlp</a>
                            }
                            <br />
                        }
                        <br />
                    }
                    <span>@("Count: " + count)</span>
                    <br />
                }

                if (url.EndsWith("/svalue"))
                {
                    List<SValueSet> data = null;
                    if (searchLower == "" && smenum == 0)
                    {
                        data = db.SValueSets
                        .OrderBy(v => v.ParentSMENum)
                        .Take(size)
                        .ToList();
                    }
                    else
                    {
                        data = db.SValueSets
                        .OrderBy(v => v.ParentSMENum)
                        .Where(v => (smenum == 0 || v.ParentSMENum == smenum) && 
                            (searchLower == "" || v.Value.ToLower().Contains(searchLower) || v.Annotation.ToLower().Contains(searchLower)))
                        .Take(size)
                        .ToList();
                        found = data.Count() + "/";
                    }
                    total = db.SValueSets.Count();
                    count = data.Count();

                    <span>
                        &nbsp&nbsp@("SValue#: " + found + total + " size=" + size + " search=" + search + " smenum=" + smenum)
                    </span>
                    <br />
                    <br />
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">First 1000 as TABLE</span></b>
                        <br />
                    }
                    <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                        <thead>
                            <tr>
                                <th style="word-break:keep-all">Par#</th>
                                <th style="word-break:keep-all">Value</th>
                                <th style="word-break:keep-all">Annotation</th>
                                <th style="word-break:keep-all">Links</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < data.Count && i < 1000; i++)
                            {
                                var smeDB = data[i];
                                <tr>
                                    <td style="word-break:keep-all">@smeDB.ParentSMENum</td>
                                    <td style="word-break:keep-all">@smeDB.Value</td>
                                    <td style="word-break:keep-all">@smeDB.Annotation</td>
                                    <td style="word-break:keep-all">
                                        @if (smeDB.ParentSMENum != 0)
                                        {
                                            <a href="@(shorturl + "/sme?smenum=" + smeDB.ParentSMENum)" target="_blank">par</a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">All other as text</span></b>
                        <br />
                        @for (int i = 1000; i < data.Count; i++)
                        {
                            var smeDB = data[i];
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.ParentSMENum</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.Value</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.Annotation</span>
                            <span style="background-color:blue;">&nbsp</span>
                            @if (smeDB.ParentSMENum != 0)
                            {
                                <a href="@(shorturl + "/sme?smenum=" + smeDB.ParentSMENum)" target="_blank">par</a>
                            }
                            <br />
                        }
                        <br />
                    }
                    <span>@("Count: " + count)</span>
                    <br />
                }

                if (url.EndsWith("/ivalue"))
                {
                    bool withI = false;
                    long iEqual = 0;
                    try
                    {
                        if (searchLower != "")
                        {
                            iEqual = Convert.ToInt64(searchLower);
                            withI = true;
                        }
                    }
                    catch { }

                    List<IValueSet> data = null;
                    if (searchLower == "" && smenum == 0)
                    {
                        data = db.IValueSets
                        .OrderBy(v => v.Id)
                        .Take(size)
                        .ToList();
                    }
                    else
                    {
                        data = db.IValueSets
                        .OrderBy(v => v.ParentSMENum)
                        .Where(v => (smenum == 0 || v.ParentSMENum == smenum) && 
                            (searchLower == "" || (withI && v.Value == iEqual) || v.Annotation.ToLower().Contains(searchLower)))
                        .Take(size)
                        .ToList();
                        found = data.Count() + "/";
                    }
                    total = db.IValueSets.Count();
                    count = data.Count();

                    <span>
                        &nbsp&nbsp@("IValue#: " + found + total + " size=" + size + " search=" + search + " smenum=" + smenum)
                    </span>
                    <br />
                    <br />
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">First 1000 as TABLE</span></b>
                        <br />
                    }
                    <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                        <thead>
                            <tr>
                                <th style="word-break:keep-all">Par#</th>
                                <th style="word-break:keep-all">Value</th>
                                <th style="word-break:keep-all">Annotation</th>
                                <th style="word-break:keep-all">Links</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < data.Count && i < 1000; i++)
                            {
                                var smeDB = data[i];
                                <tr>
                                    <td style="word-break:keep-all">@smeDB.ParentSMENum</td>
                                    <td style="word-break:keep-all">@smeDB.Value</td>
                                    <td style="word-break:keep-all">@smeDB.Annotation</td>
                                    <td style="word-break:keep-all">
                                        @if (smeDB.ParentSMENum != 0)
                                        {
                                            <a href="@(shorturl + "/sme?smenum=" + smeDB.ParentSMENum)" target="_blank">par</a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">All other as text</span></b>
                        <br />
                        @for (int i = 1000; i < data.Count; i++)
                        {
                            var smeDB = data[i];
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.ParentSMENum</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.Value</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.Annotation</span>
                            <span style="background-color:blue;">&nbsp</span>
                            @if (smeDB.ParentSMENum != 0)
                            {
                                <a href="@(shorturl + "/sme?smenum=" + smeDB.ParentSMENum)" target="_blank">par</a>
                            }
                            <br />
                        }
                        <br />
                    }
                    <span>@("Count: " + count)</span>
                    <br />
                }

                if (url.EndsWith("/dvalue"))
                {
                    bool withF = false;
                    double fEqual = 0;
                    try
                    {
                        if (searchLower != "")
                        {
                            fEqual = Convert.ToDouble(searchLower);
                            withF = true;
                        }
                    }
                    catch { }

                    List<DValueSet> data = null;
                    if (searchLower == "" && smenum == 0)
                    {
                        data = db.DValueSets
                        .OrderBy(v => v.ParentSMENum)
                        .Take(size)
                        .ToList();
                    }
                    else
                    {
                        data = db.DValueSets
                        .OrderBy(v => v.ParentSMENum)
                        .Where(v => (smenum == 0 || v.ParentSMENum == smenum) &&
                        (searchLower == "" || (withF && v.Value == fEqual) || v.Annotation.ToLower().Contains(searchLower)))
                        .Take(size)
                        .ToList();
                        found = data.Count() + "/";
                    }
                    total = db.DValueSets.Count();
                    count = data.Count();

                    <span>
                        &nbsp&nbsp@("DValue#: " + found + total + " size=" + size + " search=" + search + " smenum=" + smenum)
                    </span>
                    <br />
                    <br />
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">First 1000 as TABLE</span></b>
                        <br />
                    }
                    <table class="table table-bordered table-sm" style="width:100%;word-wrap:break-word;word-break:break-all;">
                        <thead>
                            <tr>
                                <th style="word-break:keep-all">Par#</th>
                                <th style="word-break:keep-all">Value</th>
                                <th style="word-break:keep-all">Annotation</th>
                                <th style="word-break:keep-all">Links</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < data.Count && i < 1000; i++)
                            {
                                var smeDB = data[i];
                                <tr>
                                    <td style="word-break:keep-all">@smeDB.ParentSMENum</td>
                                    <td style="word-break:keep-all">@smeDB.Value</td>
                                    <td style="word-break:keep-all">@smeDB.Annotation</td>
                                    <td style="word-break:keep-all">
                                        @if (smeDB.ParentSMENum != 0)
                                        {
                                            <a href="@(shorturl + "/sme?smenum=" + smeDB.ParentSMENum)" target="_blank">par</a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (size > 1000 && count > 1000)
                    {
                        <b><span style="color:red;">All other as text</span></b>
                        <br />
                        @for (int i = 1000; i < data.Count; i++)
                        {
                            var smeDB = data[i];
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.ParentSMENum</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.Value</span>
                            <span style="background-color:blue;">&nbsp</span>
                            <span>@smeDB.Annotation</span>
                            <span style="background-color:blue;">&nbsp</span>
                            @if (smeDB.ParentSMENum != 0)
                            {
                                <a href="@(shorturl + "/sme?smenum=" + smeDB.ParentSMENum)" target="_blank">par </a>
                            }
                            <br />
                        }
                        <br />
                    }
                    <span>@("Count: " + count)</span>
                    <br />
                }
                watch.Stop();
                <span>@("Elapsed ms: " + watch.ElapsedMilliseconds)</span>
            }
            <br />
            <br />
        }
    }
</div>

@code {
    long total = 0;
    int size = 1000;
    string search = "";
    long aasxnum = 0;
    long aasnum = 0;
    long smnum = 0;
    long smenum = 0;
    string smId = "";
}
